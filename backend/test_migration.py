#!/usr/bin/env python3
"""
Script de test pour v√©rifier que la migration PostgreSQL fonctionne correctement
"""

import os
import sys
import logging
import traceback
from datetime import datetime

# Ajouter le r√©pertoire parent au PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.db.database import test_connection, get_user_by_email, create_user, get_password_hash
from app.db.queries import create_meeting, get_meeting, update_meeting, get_meetings_by_user

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_database_connection():
    """Tester la connexion √† la base de donn√©es"""
    logger.info("Test de connexion PostgreSQL...")
    try:
        result = test_connection()
        if result:
            logger.info("‚úÖ Connexion PostgreSQL r√©ussie")
            return True
        else:
            logger.error("‚ùå √âchec de la connexion PostgreSQL")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion: {e}")
        return False

def test_user_operations():
    """Tester les op√©rations sur les utilisateurs"""
    logger.info("Test des op√©rations utilisateurs...")
    
    try:
        # Test: R√©cup√©rer un utilisateur existant
        admin_user = get_user_by_email('admin@gilbert.com')
        if admin_user:
            logger.info(f"‚úÖ Utilisateur admin trouv√©: {admin_user['email']}")
        else:
            logger.warning("‚ö†Ô∏è  Utilisateur admin non trouv√©")
        
        # Test: Cr√©er un utilisateur de test
        test_email = f"test-{datetime.now().strftime('%Y%m%d-%H%M%S')}@gilbert.com"
        user_data = {
            "email": test_email,
            "hashed_password": get_password_hash("testpassword"),
            "full_name": "Test User Migration"
        }
        
        new_user = create_user(user_data)
        if new_user:
            logger.info(f"‚úÖ Nouvel utilisateur cr√©√©: {new_user['email']}")
            return new_user
        else:
            logger.error("‚ùå √âchec de cr√©ation d'utilisateur")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors des tests utilisateurs: {e}")
        logger.error(traceback.format_exc())
        return None

def test_meeting_operations(user_id: str):
    """Tester les op√©rations sur les r√©unions"""
    logger.info("Test des op√©rations r√©unions...")
    
    try:
        # Test: Cr√©er une r√©union
        meeting_data = {
            "user_id": user_id,
            "title": f"R√©union test {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "file_url": "/test/audio.mp3",
            "transcript_status": "pending"
        }
        
        new_meeting = create_meeting(meeting_data)
        if new_meeting:
            logger.info(f"‚úÖ R√©union cr√©√©e: {new_meeting['title']}")
            meeting_id = new_meeting['id']
        else:
            logger.error("‚ùå √âchec de cr√©ation de r√©union")
            return False
        
        # Test: R√©cup√©rer la r√©union
        retrieved_meeting = get_meeting(meeting_id, user_id)
        if retrieved_meeting:
            logger.info(f"‚úÖ R√©union r√©cup√©r√©e: {retrieved_meeting['title']}")
        else:
            logger.error("‚ùå √âchec de r√©cup√©ration de r√©union")
            return False
        
        # Test: Mettre √† jour la r√©union
        update_data = {
            "transcript_status": "completed",
            "transcript_text": "Ceci est un test de transcription",
            "duration_seconds": 120,
            "speakers_count": 2
        }
        
        update_success = update_meeting(meeting_id, user_id, update_data)
        if update_success:
            logger.info("‚úÖ R√©union mise √† jour avec succ√®s")
        else:
            logger.error("‚ùå √âchec de mise √† jour de r√©union")
            return False
        
        # Test: R√©cup√©rer toutes les r√©unions de l'utilisateur
        user_meetings = get_meetings_by_user(user_id)
        if user_meetings and len(user_meetings) > 0:
            logger.info(f"‚úÖ {len(user_meetings)} r√©union(s) trouv√©e(s) pour l'utilisateur")
        else:
            logger.warning("‚ö†Ô∏è  Aucune r√©union trouv√©e pour l'utilisateur")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors des tests r√©unions: {e}")
        logger.error(traceback.format_exc())
        return False

def test_authentication_flow():
    """Tester le flux d'authentification"""
    logger.info("Test du flux d'authentification...")
    
    try:
        # Test avec l'utilisateur admin par d√©faut
        admin_user = get_user_by_email('admin@gilbert.com')
        if not admin_user:
            logger.error("‚ùå Utilisateur admin non trouv√©")
            return False
        
        # V√©rifier que la structure contient les bons champs
        required_fields = ['id', 'email', 'password_hash', 'full_name']
        missing_fields = [field for field in required_fields if field not in admin_user]
        
        if missing_fields:
            logger.error(f"‚ùå Champs manquants dans l'utilisateur: {missing_fields}")
            return False
        
        logger.info("‚úÖ Structure utilisateur valide")
        logger.info(f"   - ID: {admin_user['id']}")
        logger.info(f"   - Email: {admin_user['email']}")
        logger.info(f"   - Nom complet: {admin_user['full_name']}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test d'authentification: {e}")
        logger.error(traceback.format_exc())
        return False

def main():
    """Fonction principale de test"""
    logger.info("=== D√âBUT DES TESTS DE MIGRATION ===")
    
    results = {
        'connection': False,
        'authentication': False,
        'users': False,
        'meetings': False
    }
    
    # Test 1: Connexion
    results['connection'] = test_database_connection()
    if not results['connection']:
        logger.error("Arr√™t des tests: probl√®me de connexion")
        return False
    
    # Test 2: Authentification
    results['authentication'] = test_authentication_flow()
    
    # Test 3: Op√©rations utilisateurs
    new_user = test_user_operations()
    if new_user:
        results['users'] = True
        user_id = new_user['id']
        
        # Test 4: Op√©rations r√©unions
        results['meetings'] = test_meeting_operations(user_id)
    
    # R√©sum√© des r√©sultats
    logger.info("=== R√âSUM√â DES TESTS ===")
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        logger.info(f"{test_name.capitalize()}: {status}")
    
    success_rate = (passed_tests / total_tests) * 100
    logger.info(f"Taux de r√©ussite: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if passed_tests == total_tests:
        print("\nüéâ TOUS LES TESTS ONT R√âUSSI !")
        print("La migration PostgreSQL est fonctionnelle.")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} test(s) ont √©chou√©")
        print("Veuillez v√©rifier les logs pour plus de d√©tails.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)